//Activity sheduling Problem
#include <iostream>
#include <algorithm>
#include <cmath>
using namespace std;

int maxi(int a, int b){
 int max =  a>b?a:b;
 return max;
}

void sorting(int wt[],int val[],int w_v[], int n){
    int idx;
    int temp, maxi;
    int temp_wt, temp_val;
    
    for(int i=0; i<n; i++){
        maxi = w_v[i];
        idx = i;
        for(int j=i; j<n-1; j++){
            int k = j+1;
            if(maxi < w_v[k]){
                maxi = w_v[k];
                idx = k;
            }
        }
    temp = w_v[i];
    w_v[i] = w_v[idx]; //maxi;
    w_v[idx] = temp;
    
    temp_wt = wt[i];
    wt[i] = wt[idx];
    wt[idx] = temp_wt;
    
    temp_val = val[i];
    val[i] = val[idx];
    val[idx] = temp_val;
    
    }
    
}



int knapsack(int wt[], int val[], int w_v[], int n, int t_capacity){
 
    int price =0;
    int r_capacity = t_capacity;
    
    for(int i=0; i<n; i++){
        if(wt[i] < r_capacity ){
            price += val[i];
            r_capacity -= wt[i];
            
        }
        
        else if(wt[i] > r_capacity &&  r_capacity > 0){
            price += w_v[i]*r_capacity;
            r_capacity = 0;
            cout<<endl<<"Price = "<<price<<",  r_capi = "<<r_capacity;
            return price;
        }
        cout<<endl<<"Price = "<<price<<",  r_capi = "<<r_capacity;
    }
    
    cout<<endl<<"Price = "<<price;
    
    return price;
};


void display(const char* A[], int Start[], int Finish[], int n){
    
    for(int i=0; i<n; i++){
    cout<<A[i]<<",  ";
    }  
    cout<<endl;
    for(int i=0; i<n; i++){
    cout<<Start[i]<<",  ";
    }
    cout<<endl;
    for(int i=0; i<n; i++){
    cout<<Finish[i]<<",  ";
    }
}


int main(){
 
 const char* A[] = {"a1", "a2", "a3", "a4", "a5", "a6"};
 int Start[] = {1,0,1,4,2,5,3,4};
 int Finish[] = {3,4,2,6,9,8,5,5};
 int n = 8;
 
 
    
    cout<<"Before Sorting"<<endl;
    display(A,Start,Finish,n);
    
    // sorting(wt,val,w_v,n); //Aarranging of wt, val, according to dec. sorting of w_v
    
    cout<<endl<<"After Sorting"<<endl;
    display(A,Start,Finish,n);
    
//   fint price = knapsack(wt,val,w_v,n,t_capacity);
//     cout<<endl<<"Price = "<<price;
    
   
    

    // knapsack(r,c,wt,val,Table);
    // display(Table);

 
 return 0;
}
