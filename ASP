//Activity sheduling Problem
#include <iostream>
#include <algorithm>
#include <cmath>
using namespace std;

int maxi(int a, int b){
 int max =  a>b?a:b;
 return max;
}

void sorting(const char* A[], int Start[], int Finish[], int n){
    int idx;
    int temp_F, temp_S, mini;
    const char* temp_A;
    
    for(int i=0; i<n; i++){
        mini = Finish[i];
        idx = i;
        for(int j=i; j<n-1; j++){
            int k = j+1;
            if(mini > Finish[k]){
                mini = Finish[k];
                idx = k;
            }
        }
    temp_F = Finish[i];
    Finish[i] = Finish[idx]; //maxi;
    Finish[idx] = temp_F;
    
    temp_A = A[i];
    A[i] = A[idx];
    A[idx] = temp_A;
    
    temp_S = Start[i];
    Start[i] = Start[idx];
    Start[idx] = temp_S;
    
    }
    
}


void ASP(const char* A[], int Start[], int Finish[], int n){
 
    const char* Selected_activity[8] ;
    int k=0;
    
    Selected_activity[k] = A[0];
    int last_seleted = 0;
    
    for(int i=1; i<n; i++){
        if(Finish[last_seleted] <= Start[i]){
            k++;
            Selected_activity[k] = A[i];
            
            last_seleted = i;
        }
    }
    
    cout<<endl<<"Selected Activity"<<endl;
    for(int i=0; i<=k; i++){
    cout<<Selected_activity[i]<<",  ";
    }  
    
};


void display(const char* A[], int Start[], int Finish[], int n){
    
    for(int i=0; i<n; i++){
    cout<<A[i]<<",  ";
    }  
    cout<<endl;
    for(int i=0; i<n; i++){
    cout<<Start[i]<<",   ";
    }
    cout<<endl;
    for(int i=0; i<n; i++){
    cout<<Finish[i]<<",   ";
    }
    cout<<endl;
}


int main(){
 
 const char* A[] = {"a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8"};
 int Start[] = {1,0,1,4,2,5,3,4};
 int Finish[] = {3,4,2,6,9,8,5,5};
 int n = 8;
 
 
    
    cout<<"Before Sorting"<<endl;
    display(A,Start,Finish,n);
    
    sorting(A,Start,Finish,n); 
    
    cout<<endl<<"After Sorting"<<endl;
    display(A,Start,Finish,n);
    
    ASP(A,Start,Finish,n);


 return 0;
}
